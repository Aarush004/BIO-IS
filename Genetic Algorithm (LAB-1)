import random
import numpy as np

def objective_function(x):
    return x**2

population_size = 20
mutation_rate = 0.01
crossover_rate = 0.8
generations = 100
gene_length = 10

def create_population():
    return np.random.randint(2, size=(population_size, gene_length))

def decode(chromosome):
    return int("".join(map(str, chromosome)), 2)

def evaluate_fitness(population):
    return np.array([objective_function(decode(individual)) for individual in population])

def select_population(population, fitness):
    total_fitness = np.sum(fitness)
    probabilities = fitness / total_fitness
    selected_indices = np.random.choice(range(population_size), size=population_size, p=probabilities)
    return population[selected_indices]

def crossover(parent1, parent2):
    if random.random() < crossover_rate:
        crossover_point = random.randint(1, gene_length - 1)
        child1 = np.concatenate((parent1[:crossover_point], parent2[crossover_point:]))
        child2 = np.concatenate((parent2[:crossover_point], parent1[crossover_point:]))
        return child1, child2
    else:
        return parent1, parent2

def mutate(offspring):
    if random.random() < mutation_rate:
        mutation_point = random.randint(0, gene_length - 1)
        offspring[mutation_point] = 1 - offspring[mutation_point]
    return offspring

def genetic_algorithm():
    population = create_population()
    best_solution = None
    best_fitness = -np.inf
    
    for generation in range(generations):
        fitness = evaluate_fitness(population)
        
        max_fitness_index = np.argmax(fitness)
        if fitness[max_fitness_index] > best_fitness:
            best_fitness = fitness[max_fitness_index]
            best_solution = population[max_fitness_index]
        
        selected_population = select_population(population, fitness)
        
        new_population = []
        for i in range(0, population_size, 2):
            parent1 = selected_population[i]
            parent2 = selected_population[i + 1]
            
            child1, child2 = crossover(parent1, parent2)
            new_population.append(mutate(child1))
            new_population.append(mutate(child2))
        
        population = np.array(new_population)
        
        print(f"Generation {generation + 1}, Best Fitness: {best_fitness}")

    print(f"Best Solution: {decode(best_solution)}, Fitness: {best_fitness}")

genetic_algorithm()
